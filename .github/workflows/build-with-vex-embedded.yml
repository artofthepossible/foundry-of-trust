name: Build Image with Embedded VEX

on:
  push:
    branches: [ main, develop ]
    tags: [ "*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: demonstrationorg
  IMAGE_NAME: foundry-of-trust
  IMAGE_TAG: v1.1-DHI-fixed

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=${{ env.IMAGE_TAG }}

      - name: Build and push image with embedded VEX
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: "linux/amd64,linux/arm64"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          sbom: true
          provenance: mode=max
          annotations: |
            vex.openvex.dev/embedded=true
            vex.openvex.dev/document=/app/vex.json
            vex.openvex.dev/schema-version=v0.2.0
            org.opencontainers.image.title=Foundry of Trust with Embedded VEX
            org.opencontainers.image.description=Spring Boot application with embedded VEX statements for CVE compliance

      - name: Analyze with Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: quickview, cves, recommendations
          image: ${{ steps.meta.outputs.tags }}
          sarif-file: docker-scout.sarif
          platform: "linux/amd64"
          summary: true

      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: docker-scout.sarif
          category: Docker-Scout

      - name: Verify VEX document
        run: |
          IMAGE_TAG="${{ steps.meta.outputs.tags }}"
          IMAGE_TAG=$(echo "$IMAGE_TAG" | head -n1)
          
          echo "🔍 Verifying VEX document in image: $IMAGE_TAG"
          
          # Extract VEX document from container
          docker create --name temp-vex-check "$IMAGE_TAG"
          docker cp temp-vex-check:/app/vex.json ./vex-check.json
          docker rm temp-vex-check
          
          # Validate VEX document
          if jq empty ./vex-check.json 2>/dev/null; then
            CVE_COUNT=$(jq '.statements | length' ./vex-check.json)
            echo "✅ VEX document is valid JSON covering $CVE_COUNT CVEs"
            
            # Display VEX summary
            echo "## 🛡️ VEX Document Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Location** | \`/app/vex.json\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **CVE Statements** | $CVE_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| **Schema Version** | \`$(jq -r '.["@context"]' ./vex-check.json | grep -o 'v[0-9.]*')\` |" >> $GITHUB_STEP_SUMMARY
            echo "| **Author** | \`$(jq -r '.author' ./vex-check.json)\` |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # List CVEs
            echo "### 📋 CVE Statements" >> $GITHUB_STEP_SUMMARY
            jq -r '.statements[] | "- **\(.vulnerability.name)**: \(.status) - \(.vulnerability.description)"' ./vex-check.json >> $GITHUB_STEP_SUMMARY
            
          else
            echo "❌ VEX document is not valid JSON"
            exit 1
          fi
          
          rm -f ./vex-check.json

      - name: Build summary
        if: always()
        run: |
          echo "## 🚀 Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image with embedded VEX, SBOM, and provenance attestations:**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull the image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Extract VEX document" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm --entrypoint='' ${{ steps.meta.outputs.tags }} cat /app/vex.json" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# View SBOM" >> $GITHUB_STEP_SUMMARY
          echo "docker scout sbom ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Inspect attestations" >> $GITHUB_STEP_SUMMARY
          echo "docker buildx imagetools inspect ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY