# Foundry of Trust Demo - Container Security Comparison Workflow
# 
# This workflow demonstrates the security improvements achieved by replacing
# standard Eclipse Temurin base images with DHI golden base images.
#
# Required Repository Secrets:
# - DOCKER_HUB_USERNAME: Docker Hub username for demonstrationorg (should be "demonstrationorg")
# - DOCKER_HUB_TOKEN: Docker Hub access token (NOT password - create from Docker Hub Security settings)
#
# The workflow builds and compares two versions:
# 1. NoDHI: Standard Eclipse Temurin base images (vulnerable)
# 2. DHI: DHI golden base images (hardened and secure)

name: Build Image Comparison - Standard vs Golden Base Images

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: demonstrationorg
  IMAGE_NAME: foundry-of-trust
  GOLDEN_BASE_IMAGE: demonstrationorg/dhi-temurin:21_whale
  NODHI_TAG: v1.0-NoDHI
  DHI_TAG: v1.0-DHI

jobs:
  build-nodhi-image:
    name: Build Standard Image (NoDHI)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
      attestations: write
      packages: write

    outputs:
      nodhi-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NODHI_TAG }}
      nodhi-digest: ${{ steps.build-nodhi.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into container registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build NoDHI image (Standard Eclipse Temurin)
      id: build-nodhi
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NODHI_TAG }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Foundry of Trust - Standard Base Images
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        sbom: true
        provenance: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM attestation for NoDHI
      uses: actions/attest-sbom@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build-nodhi.outputs.digest }}
        sbom-path: /tmp/sbom.json

  build-dhi-image:
    name: Build Golden Base Image (DHI)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      id-token: write
      attestations: write
      packages: write

    outputs:
      dhi-image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DHI_TAG }}
      dhi-digest: ${{ steps.build-dhi.outputs.digest }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log into container registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Update Dockerfile to use DHI Golden Base Images
      run: |
        echo "Original Dockerfile base images:"
        grep -n "FROM.*AS" Dockerfile
        
        # Create a backup of original Dockerfile
        cp Dockerfile Dockerfile.backup
        
        # Update Dockerfile to use DHI golden base images
        sed -i 's|FROM eclipse-temurin:21-jdk-jammy AS deps|FROM demonstrationorg/dhi-temurin:21-jdk-alpine3.21-dev AS deps|g' Dockerfile
        sed -i 's|FROM eclipse-temurin:21-jre-jammy AS final|FROM demonstrationorg/dhi-temurin:21_whale AS final|g' Dockerfile
        
        echo "Updated Dockerfile to use DHI golden base images:"
        grep -n "FROM.*AS" Dockerfile

    - name: Build DHI image (Golden Base Images)
      id: build-dhi
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.DHI_TAG }}
        labels: |
          org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          org.opencontainers.image.description=Foundry of Trust - DHI Golden Base Images
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        sbom: true
        provenance: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM attestation for DHI
      uses: actions/attest-sbom@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build-dhi.outputs.digest }}
        sbom-path: /tmp/sbom.json

  security-comparison:
    name: Security Analysis & Comparison
    needs: [build-nodhi-image, build-dhi-image]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Docker Scout CLI
      run: |
        echo "Installing Docker Scout CLI..."
        curl -sSfL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh | sh -s --
        echo "Docker Scout CLI installed successfully"

    - name: Log into container registry
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Docker Scout - CVE Analysis NoDHI Image
      run: |
        echo "🔍 Scanning NoDHI image for vulnerabilities..."
        docker scout cves ${{ needs.build-nodhi-image.outputs.nodhi-image }} --format sarif --output nodhi-cves.sarif || true
        docker scout cves ${{ needs.build-nodhi-image.outputs.nodhi-image }} --format json --output nodhi-cves.json || true
        echo "NoDHI vulnerability scan completed"
      continue-on-error: true

    - name: Docker Scout - CVE Analysis DHI Image
      run: |
        echo "🔍 Scanning DHI image for vulnerabilities..."
        docker scout cves ${{ needs.build-dhi-image.outputs.dhi-image }} --format sarif --output dhi-cves.sarif || true
        docker scout cves ${{ needs.build-dhi-image.outputs.dhi-image }} --format json --output dhi-cves.json || true
        echo "DHI vulnerability scan completed"
      continue-on-error: true

    - name: Upload SARIF results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: dhi-cves.sarif

    - name: Docker Scout - Policy Evaluation
      run: |
        echo "📋 Evaluating policy compliance..."
        docker scout policy ${{ needs.build-dhi-image.outputs.dhi-image }} || true
        echo "Policy evaluation completed"

    - name: Generate Security Comparison Report
      run: |
        echo "## 🛡️ Security Comparison: Standard vs Golden Base Images" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📊 Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Image Version | Base Images | Tag | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------------|-------------|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Standard (NoDHI)** | \`eclipse-temurin:21-jdk-jammy\`, \`eclipse-temurin:21-jre-jammy\` | \`${{ env.NODHI_TAG }}\` | ✅ Built |" >> $GITHUB_STEP_SUMMARY
        echo "| **Golden Base (DHI)** | \`demonstrationorg/dhi-temurin:21-jdk-alpine3.21-dev\`, \`demonstrationorg/dhi-temurin:21_whale\` | \`${{ env.DHI_TAG }}\` | ✅ Built |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### � Vulnerability Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Parse vulnerability counts from JSON files
        if [ -f nodhi-cves.json ]; then
          NODHI_CRITICAL=$(jq -r '.vulnerabilities[] | select(.severity == "critical") | .id' nodhi-cves.json 2>/dev/null | wc -l || echo "0")
          NODHI_HIGH=$(jq -r '.vulnerabilities[] | select(.severity == "high") | .id' nodhi-cves.json 2>/dev/null | wc -l || echo "0")
          NODHI_TOTAL=$(jq -r '.vulnerabilities | length' nodhi-cves.json 2>/dev/null || echo "0")
        else
          NODHI_CRITICAL="N/A"
          NODHI_HIGH="N/A"
          NODHI_TOTAL="N/A"
        fi
        
        if [ -f dhi-cves.json ]; then
          DHI_CRITICAL=$(jq -r '.vulnerabilities[] | select(.severity == "critical") | .id' dhi-cves.json 2>/dev/null | wc -l || echo "0")
          DHI_HIGH=$(jq -r '.vulnerabilities[] | select(.severity == "high") | .id' dhi-cves.json 2>/dev/null | wc -l || echo "0")
          DHI_TOTAL=$(jq -r '.vulnerabilities | length' dhi-cves.json 2>/dev/null || echo "0")
        else
          DHI_CRITICAL="N/A"
          DHI_HIGH="N/A"
          DHI_TOTAL="N/A"
        fi
        
        echo "| Severity | NoDHI (Standard) | DHI (Golden Base) | Improvement |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|------------------|-------------------|-------------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Critical** | $NODHI_CRITICAL | $DHI_CRITICAL | $([ "$DHI_CRITICAL" -lt "$NODHI_CRITICAL" ] 2>/dev/null && echo "✅ Reduced" || echo "📊 Check") |" >> $GITHUB_STEP_SUMMARY
        echo "| **High** | $NODHI_HIGH | $DHI_HIGH | $([ "$DHI_HIGH" -lt "$NODHI_HIGH" ] 2>/dev/null && echo "✅ Reduced" || echo "📊 Check") |" >> $GITHUB_STEP_SUMMARY
        echo "| **Total** | $NODHI_TOTAL | $DHI_TOTAL | $([ "$DHI_TOTAL" -lt "$NODHI_TOTAL" ] 2>/dev/null && echo "✅ Improved" || echo "📊 Analysis") |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🎯 Demo Workflow Demonstrated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **✅ Built standard image** (\`${{ env.NODHI_TAG }}\`) with Eclipse Temurin base images" >> $GITHUB_STEP_SUMMARY
        echo "2. **✅ Applied DHI golden base images** (\`${{ env.DHI_TAG }}\`) for enhanced security" >> $GITHUB_STEP_SUMMARY
        echo "3. **✅ Generated security attestations** (SBOM + Provenance) for both versions" >> $GITHUB_STEP_SUMMARY
        echo "4. **✅ Performed vulnerability comparison** showing security improvement" >> $GITHUB_STEP_SUMMARY
        echo "5. **✅ Demonstrated supply chain security** with comprehensive scanning" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🏷️ Image Registry" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Images Published to Docker Hub:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Standard Image**: [\`${{ needs.build-nodhi-image.outputs.nodhi-image }}\`](https://hub.docker.com/r/${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tags)" >> $GITHUB_STEP_SUMMARY
        echo "- **Golden Base Image**: [\`${{ needs.build-dhi-image.outputs.dhi-image }}\`](https://hub.docker.com/r/${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/tags)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### � Local Testing Commands" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# Pull and test standard image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ needs.build-nodhi-image.outputs.nodhi-image }}" >> $GITHUB_STEP_SUMMARY
        echo "docker scout cves ${{ needs.build-nodhi-image.outputs.nodhi-image }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Pull and test golden base image" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ needs.build-dhi-image.outputs.dhi-image }}" >> $GITHUB_STEP_SUMMARY
        echo "docker scout cves ${{ needs.build-dhi-image.outputs.dhi-image }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# Compare the two images" >> $GITHUB_STEP_SUMMARY
        echo "docker scout compare ${{ needs.build-nodhi-image.outputs.nodhi-image }} --to ${{ needs.build-dhi-image.outputs.dhi-image }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY